package com.flairbit.examples.postgresjpa;

import static org.junit.Assert.assertNotNull;
import static org.ops4j.pax.exam.CoreOptions.maven;
import static org.ops4j.pax.exam.CoreOptions.systemProperty;
import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.configureConsole;
import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.features;
import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.karafDistributionConfiguration;
import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.keepRuntimeFolder;
import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.logLevel;
import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.replaceConfigurationFile;

import java.io.File;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.inject.Inject;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.ops4j.pax.exam.Configuration;
import org.ops4j.pax.exam.CoreOptions;
import org.ops4j.pax.exam.MavenUtils;
import org.ops4j.pax.exam.Option;
import org.ops4j.pax.exam.junit.PaxExam;
import org.ops4j.pax.exam.karaf.options.KarafDistributionOption;
import org.ops4j.pax.exam.karaf.options.LogLevelOption.LogLevel;
import org.ops4j.pax.exam.options.MavenArtifactUrlReference;
import org.ops4j.pax.exam.options.MavenUrlReference;
import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
import org.ops4j.pax.exam.spi.reactors.PerMethod;
import org.ops4j.pax.exam.util.PathUtils;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Filter;
import org.osgi.util.tracker.ServiceTracker;

import com.flairbit.examples.postgresjpa.dao.api.ExampleEntityService;

@RunWith(PaxExam.class)
@ExamReactorStrategy(PerMethod.class)
public class TestModule {

	@Inject
	private static BundleContext bcontext;

	@Configuration
	public Option[] config() throws Exception {
		
		String karafVersion = MavenUtils.getArtifactVersion("org.apache.karaf", "apache-karaf");
		
		MavenUrlReference jpaPostgresRepo = maven()
				.groupId("com.flairbit.examples.postgresjpa")
				.artifactId("myjpaservice.feature")
				.classifier("features")
				.type("xml")
				.version("1.0-SNAPSHOT");
		
		MavenArtifactUrlReference karafUrl = CoreOptions.maven()
				.groupId("org.apache.karaf")
				.artifactId("apache-karaf")
				.versionAsInProject().type("tar.gz");
		
		MavenArtifactUrlReference standardRepo = maven()
				.groupId("org.apache.karaf.features")
				.artifactId("standard")
				.version(karafVersion)
				.classifier("features")
				.type("xml");
		
		String localRepository = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
        if (localRepository == null) {
            localRepository = "";
        }
		
		return new Option[] {
				karafDistributionConfiguration()
					.frameworkUrl(karafUrl)
					.unpackDirectory(new File("target", "exam"))
					.runEmbedded(false)
					.useDeployFolder(false),
				// This gives a fast fail when any bundle is unresolved:
				systemProperty("pax.exam.osgi.unresolved.fail").value("true"),
				logLevel(LogLevel.valueOf("INFO")),
				keepRuntimeFolder(),
				configureConsole().ignoreLocalConsole().startRemoteShell(),
				editConfigurationFilePut( "etc/config.properties", "felix.fileinstall.poll", String.valueOf(Integer.MAX_VALUE)),
				features(standardRepo , "scr"),
				KarafDistributionOption.debugConfiguration("5005", false),
				CoreOptions.composite(configFiles("src/test/resources/karaf/etc/")),
				KarafDistributionOption.editConfigurationFilePut("etc/org.ops4j.pax.url.mvn.cfg", "org.ops4j.pax.url.mvn.localRepository", localRepository),
				features(jpaPostgresRepo,"jpa-postgresql")
		};
    }

    @Before
	public void load() throws Exception {
    	
	}

	@Test
	public void testCase() throws Exception {
		assertNotNull(bcontext);
		ExampleEntityService dbStorageService = waitForReference(bcontext, ExampleEntityService.class, null, 10000L);
		assertNotNull(dbStorageService);

		// Wait some time for the schema to be generated by JPA...
		// TODO implement a better way to wait
		Thread.sleep(15000L);

		final long id = dbStorageService.addEntity("btest.id").getId();
		assertNotNull(dbStorageService.getEntityById(id));
	}
	
	Option[] configFiles(final String basePath) throws Exception {
		final String bp;
		List<Option> options = new ArrayList<>();
		if(!basePath.startsWith(File.separator))
			bp = File.separator + basePath;
		else
			bp = basePath;
		URI uri = getURI(bp);
		if (Files.exists(Paths.get(uri), LinkOption.NOFOLLOW_LINKS)) {
			Iterator<Path> iter = Files.list(Paths.get(uri)).iterator();
			while(iter.hasNext()){
				Path f = iter.next();
				if( !f.toFile().isDirectory()) {
					String fileName = f.getFileName().toString();
					options.add(
						replaceConfigurationFile(
								"etc" + File.separator + fileName, 
								f.toFile()));
				}
			}
		}
		return options.toArray(new Option[]{});
	}
	
	URI getURI(String relativePath) {
		String userdir = getOuterUserDir();
		if(userdir == null || "".equals(userdir)) {
			userdir = getFlairKitBase();
		}
		if(relativePath == null)
			relativePath = "";
		return URI.create("file:" + userdir + relativePath);
	}
	
	String getOuterUserDir() {
		return PathUtils.getBaseDir();
	}
	
	String getFlairKitBase() {
		return System.getProperty("karaf.base");
	}
	<T> T waitForReference(BundleContext context, Class<T> clazz, String strFilter, long timeout) throws Exception {
	    ServiceTracker<T,?> st;
	    if (strFilter != null) {
	        Filter filter = context.createFilter(strFilter);
	        st = new ServiceTracker<>(context, filter, null);
	    } else {
	        st = new ServiceTracker<>(context, clazz, null);
	    }
	    st.open();
	    return clazz.cast(st.waitForService(timeout));
	}
}